<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Hello. I&#39;m Dean Clatworthy</title>
    <link>https://deanclatworthy.com/categories/php.html</link>
    <description>Recent content in PHP on Hello. I&#39;m Dean Clatworthy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jul 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://deanclatworthy.com/categories/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting a twitter user&#39;s latest posts using API v1.1 and Guzzle (PHP)</title>
      <link>https://deanclatworthy.com/2013/07/getting-a-twitter-users-latest-posts-using-api-v1-1-and-guzzle-php/</link>
      <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://deanclatworthy.com/2013/07/getting-a-twitter-users-latest-posts-using-api-v1-1-and-guzzle-php/</guid>
      <description>I&amp;rsquo;ll keep this brief. Install Guzzle however you wish, but I recommend using composer:
{% highlight javascript %}
 { &amp;quot;require&amp;quot;: { &amp;quot;guzzle/guzzle&amp;quot;: &amp;quot;~3.1.1&amp;quot; } }  {% endhighlight %}
Then use the following code:
{% highlight php startinline %}
 $twitter_client = new \Guzzle\Http\Client(&#39;https://api.twitter.com/{version}&#39;, array( &#39;version&#39; =&amp;gt; &#39;1.1&#39; )); $twitter_client-&amp;gt;addSubscriber(new \Guzzle\Plugin\Oauth\OauthPlugin(array( &#39;consumer_key&#39; =&amp;gt; TWITTER_CONSUMER_KEY, &#39;consumer_secret&#39; =&amp;gt; TWITTER_CONSUMER_SECRET, &#39;token&#39; =&amp;gt; TWITTER_ACCESS_TOKEN, &#39;token_secret&#39; =&amp;gt; TWITTER_ACCESS_TOKEN_SECRET ))); $request = $twitter_client-&amp;gt;get(&#39;statuses/user_timeline.json&#39;); $request-&amp;gt;getQuery()-&amp;gt;set(&#39;count&#39;, 5); $request-&amp;gt;getQuery()-&amp;gt;set(&#39;screen_name&#39;, &#39;YOURUSERNAME&#39;); $response = $request-&amp;gt;send(); $tweets = json_decode($response-&amp;gt;getBody());  {% endhighlight %}</description>
    </item>
    
    <item>
      <title>Ensuring facebook canvas applications work in IE8 / IE9 / IE10</title>
      <link>https://deanclatworthy.com/2013/05/ensuring-facebook-canvas-applications-work-in-ie9/</link>
      <pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://deanclatworthy.com/2013/05/ensuring-facebook-canvas-applications-work-in-ie9/</guid>
      <description>Last week I deployed a new Facebook application into a production environment. Everything seemed to be working perfectly, but then I received a report that the application wasn&amp;rsquo;t working correctly in IE8+. I narrowed down the problem, and then realised that sessions weren&amp;rsquo;t working. It turns out IE8+ has a security policy that prevents iframes from setting cookies if the parent domain is different. Therefore because my PHP session cooking wouldn&amp;rsquo;t set, the sessions obviously didn&amp;rsquo;t work between pages.</description>
    </item>
    
    <item>
      <title>Silex Tip #1: How to quickly invalidate a form field in your controller</title>
      <link>https://deanclatworthy.com/2013/05/silex-tip-1-how-to-quickly-invalidate-a-form-field-in-your-controller/</link>
      <pubDate>Fri, 10 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://deanclatworthy.com/2013/05/silex-tip-1-how-to-quickly-invalidate-a-form-field-in-your-controller/</guid>
      <description>You should be using custom constraints to validate your form fields, however there are some use-cases where you need to quickly invalidate in a controller. To do this it&amp;rsquo;s quite easy:
{% highlight php startinline %}
 $form-&amp;gt;get(&#39;username&#39;)-&amp;gt;addError(new \Symfony\Component\Form\FormError(&amp;quot;This email is already in use&amp;quot;));  {% endhighlight %}</description>
    </item>
    
    <item>
      <title>Theming/styling error messages in Symfony 2</title>
      <link>https://deanclatworthy.com/2012/08/theming-error-messages-in-symfony-2/</link>
      <pubDate>Fri, 24 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://deanclatworthy.com/2012/08/theming-error-messages-in-symfony-2/</guid>
      <description>I spent a large portion of my day today trying to customize the HTML produced by Symfony 2 for form errors. The documentation has a section on how to do this, but for the life of me, I could not make it work. Here is a working, re-usable solution, with a brief explanation of the mistake I made at the end.
In your SF2 bundle create a new file /Resources/views/Form/field_errors.html.twig:</description>
    </item>
    
    <item>
      <title>Unique filenames when uploading using Zend_Filter_File_Rename (Zend Framework)</title>
      <link>https://deanclatworthy.com/2012/07/unique-filenames-when-uploading-using-zend_filter_file_rename-zend-framework/</link>
      <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://deanclatworthy.com/2012/07/unique-filenames-when-uploading-using-zend_filter_file_rename-zend-framework/</guid>
      <description>&lt;p&gt;I came across a scenario today where I needed to ensure that files uploaded always had a unique name and wouldn&amp;rsquo;t over-write a file which has the same name. ZF provides this facility but it&amp;rsquo;s not particularly well documented and I had some troubles using a couple of examples I found across the web. Alas, here is the solution.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bad character encoding causing MySQL errors in PHP</title>
      <link>https://deanclatworthy.com/2011/06/bad-character-encoding-causing-mysql-errors-in-php/</link>
      <pubDate>Thu, 09 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://deanclatworthy.com/2011/06/bad-character-encoding-causing-mysql-errors-in-php/</guid>
      <description>&lt;p&gt;Today at work I encountered a peculiar problem when working with some translations. I developed a system whereby we can send out translations to our translators and they&amp;rsquo;ll fill in the blanks and send it back to use which is then imported. Part of this project involved coding a parser for a custom file format to send out to our translators. The benefit of this is it allowed me to validate incoming translation files, as well as easily export them according to the spec I&amp;rsquo;d defined.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jump In Camp</title>
      <link>https://deanclatworthy.com/2010/04/jump-in-camp/</link>
      <pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://deanclatworthy.com/2010/04/jump-in-camp/</guid>
      <description>(Thanks to Derick Rethans for the picture)
Introductions
I was lucky enough to be given the opportunity last week to attend JumpInCamp, a developers conference/workshop ran by Microsoft in the beautiful setting of Zurich. The brief was as follows
 As a participant you will spend four unforgettable and instructive days in the Panorama Resort &amp;amp; Spa Feusisberg, Switzerland – all-inclusive, for free. A live blog – to which you will contribute – will put all your friends and colleagues in the picture while you’re at the Camp.</description>
    </item>
    
  </channel>
</rss>
