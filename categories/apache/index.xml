<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache on Hello. I&#39;m Dean Clatworthy</title>
    <link>https://deanclatworthy.com/categories/apache.html</link>
    <description>Recent content in Apache on Hello. I&#39;m Dean Clatworthy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Feb 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://deanclatworthy.com/categories/apache.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Migrating from apache to nginx (wordpress edition)</title>
      <link>https://deanclatworthy.com/2013/02/migrating-from-apache-to-nginx-wordpress-edition/</link>
      <pubDate>Thu, 28 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://deanclatworthy.com/2013/02/migrating-from-apache-to-nginx-wordpress-edition/</guid>
      <description>&lt;p&gt;Today I migrated my whole site from apache to nginx. The main reason for this being that nginx seems to handle load and use less memory on smaller boxes. It&amp;rsquo;s also an opportunity for me to try something new.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll cut straight to the chase. There&amp;rsquo;s some &lt;a href=&#34;http://codex.wordpress.org/Nginx&#34;&gt;great information&lt;/a&gt; &lt;a href=&#34;http://wiki.nginx.org/WordPress&#34;&gt;already available&lt;/a&gt;. At the time of this writing though, both sets of instructions didn&amp;rsquo;t work for me. I&amp;rsquo;ll come to why later.&lt;/p&gt;

&lt;p&gt;The first thing you want to do is install nginx and php5-fpm. Before you do this [add dotdeb to your sources list][3]. Don&amp;rsquo;t forget to update your packages.&lt;/p&gt;

&lt;p&gt;Now we can install nginx and php5-fpm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo apt-get install nginx php5-fpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In nginx, there&amp;rsquo;s no such thing as virtual hosts. We call them server blocks, but they work similarly. Let&amp;rsquo;s create one. Create a file at
&lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt; called &lt;code&gt;yourdomain.com&lt;/code&gt; with these contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    server {
        listen 80;
        server_name yourdomain.com;

        access_log /var/log/nginx/yourdomain.com.access_log;
        error_log /var/log/nginx/yourdomain.com.error_log;

        root /var/www/yourdomain.com/public_html;
        index index.php index.htm index.html;

        include /etc/nginx/global/wordpress.conf;
        include /etc/nginx/global/restrictions.conf;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a server block, which listens on port 80, with webroot at /var/www/yourdomain.com/public_html. It then includes two configuration files which we&amp;rsquo;ll come to now.&lt;/p&gt;

&lt;p&gt;Now create a file at &lt;code&gt;/etc/nginx/global/wordpress.conf&lt;/code&gt; with contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # WordPress single blog rules.
    # Designed to be included in any server {} block.

    # This order might seem weird - this is attempted to match last if rules below fail.
    # http://wiki.nginx.org/HttpCoreModule
    location / {
            try_files $uri $uri/ /index.php?$args;
    }

    # Add trailing slash to */wp-admin requests.
    rewrite /wp-admin$ $scheme://$host$uri/ permanent;

    # Directives to send expires headers and turn off 404 error logging.
    location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
           access_log off; log_not_found off; expires max;
    }

    # Uncomment one of the lines below for the appropriate caching plugin (if used).
    #include global/wordpress-wp-super-cache.conf;
    #include global/wordpress-w3-total-cache.conf;

    # Pass all .php files onto a php-fpm/php-fcgi server.
    location ~ \.php$ {
            # Zero-day exploit defense.
            # http://forum.nginx.org/read.php?2,88845,page=3
            # Won&#39;t work properly (404 error) if the file is not stored on this server, which is entirely possible with php-fpm/php-fcgi.
            # Comment the &#39;try_files&#39; line out if you set up php-fpm/php-fcgi on another machine.  And then cross your fingers that you won&#39;t get hacked.
            try_files $uri =404;

            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            #NOTE: You should have &amp;quot;cgi.fix_pathinfo = 0;&amp;quot; in php.ini

            include fastcgi_params;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #       fastcgi_intercept_errors on;
            fastcgi_pass unix:/var/run/php5-fpm.sock;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file is very important and one value particularly is of interest to us. The &lt;code&gt;fastcgi_pass&lt;/code&gt; variable is critical if you want PHP to work. When PHP-FPM is running, it listens on a socket. Dependent on your distribution and package this value might be different. Every tutorial I tried suggested pointing this value to &lt;code&gt;127.0.0.1:9000&lt;/code&gt; but this was not the case with my system. If you open &lt;code&gt;/etc/php5/fpm/pool.d/www.conf&lt;/code&gt; there is a configuration value called &lt;code&gt;listen&lt;/code&gt;. This is what you should set the &lt;code&gt;fastcgi_pass&lt;/code&gt; variable to.&lt;/p&gt;

&lt;p&gt;Finally, create a file at &lt;code&gt;/etc/nginx/global/restrictions.conf&lt;/code&gt; to handle some security:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Global restrictions configuration file.
    # Designed to be included in any server {} block.&amp;amp;lt;/p&amp;gt;
    location = /favicon.ico {
            log_not_found off;
            access_log off;
    }

    location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\. {
            deny all;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
            deny all;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all of our configuration is in place, we need to shut down apache, and start nginx and php5-fpm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo /etc/init.d/apache2 stop
    sudo /etc/init.d/php5-fpm restart
    sudo /etc/init.d/nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your site should now be running nginx. Confirm this by visiting it and of course checking to see if the process is running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ps aux | grep nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;p&gt;[3]: &lt;a href=&#34;http://www.dotdeb.org/instructions/&#34;&gt;http://www.dotdeb.org/instructions/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>